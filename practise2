 Python3 program for implementation of  
# RR scheduling  
  
# Function to find the waiting time  
# for all processes  
def findWaitingTime(processes, n, bt,  
                         wt, quantum):  
    rem_bt = [0] * n 
  
    # Copy the burst time into rt[]  
    for i in range(n):  
        rem_bt[i] = bt[i] 
    t = 0 # Current time  
  
    # Keep traversing processes in round  
    # robin manner until all of them are 
    # not done.  
    while(1): 
        done = True
  
        # Traverse all processes one by 
        # one repeatedly  
        for i in range(n): 
              
            # If burst time of a process is greater  
            # than 0 then only need to process further  
            if (rem_bt[i] > 0) : 
                done = False # There is a pending process 
                  
                if (rem_bt[i] > quantum) : 
                  
                    # Increase the value of t i.e. shows  
                    # how much time a process has been processed  
                    t += quantum  
  
                    # Decrease the burst_time of current  
                    # process by quantum  
                    rem_bt[i] -= quantum  
                  
                # If burst time is smaller than or equal   
                # to quantum. Last cycle for this process  
                else: 
                  
                    # Increase the value of t i.e. shows  
                    # how much time a process has been processed  
                    t = t + rem_bt[i]  
  
                    # Waiting time is current time minus  
                    # time used by this process  
                    wt[i] = t - bt[i]  
  
                    # As the process gets fully executed  
                    # make its remaining burst time = 0  
                    rem_bt[i] = 0
                  
        # If all processes are done  
        if (done ==true)
        }
        }
